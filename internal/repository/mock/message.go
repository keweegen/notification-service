// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/message.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/keweegen/notification/internal/entity"
	repository "github.com/keweegen/notification/internal/repository"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// CheckForDuplicates mocks base method.
func (m *MockMessage) CheckForDuplicates(ctx context.Context, message *entity.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForDuplicates", ctx, message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForDuplicates indicates an expected call of CheckForDuplicates.
func (mr *MockMessageMockRecorder) CheckForDuplicates(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForDuplicates", reflect.TypeOf((*MockMessage)(nil).CheckForDuplicates), ctx, message)
}

// Create mocks base method.
func (m *MockMessage) Create(ctx context.Context, message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageMockRecorder) Create(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessage)(nil).Create), ctx, message)
}

// CreateStatus mocks base method.
func (m *MockMessage) CreateStatus(ctx context.Context, messageID, status, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatus", ctx, messageID, status, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStatus indicates an expected call of CreateStatus.
func (mr *MockMessageMockRecorder) CreateStatus(ctx, messageID, status, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatus", reflect.TypeOf((*MockMessage)(nil).CreateStatus), ctx, messageID, status, description)
}

// Exists mocks base method.
func (m *MockMessage) Exists(ctx context.Context, messageID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, messageID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockMessageMockRecorder) Exists(ctx, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockMessage)(nil).Exists), ctx, messageID)
}

// Find mocks base method.
func (m *MockMessage) Find(ctx context.Context, messageID string) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, messageID)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMessageMockRecorder) Find(ctx, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMessage)(nil).Find), ctx, messageID)
}

// FindLastStatus mocks base method.
func (m *MockMessage) FindLastStatus(ctx context.Context, messageID string) (*entity.MessageStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastStatus", ctx, messageID)
	ret0, _ := ret[0].(*entity.MessageStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastStatus indicates an expected call of FindLastStatus.
func (mr *MockMessageMockRecorder) FindLastStatus(ctx, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastStatus", reflect.TypeOf((*MockMessage)(nil).FindLastStatus), ctx, messageID)
}

// FindProcessMessages mocks base method.
func (m *MockMessage) FindProcessMessages(ctx context.Context, dateFrom, dateTo time.Time) (entity.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProcessMessages", ctx, dateFrom, dateTo)
	ret0, _ := ret[0].(entity.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProcessMessages indicates an expected call of FindProcessMessages.
func (mr *MockMessageMockRecorder) FindProcessMessages(ctx, dateFrom, dateTo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProcessMessages", reflect.TypeOf((*MockMessage)(nil).FindProcessMessages), ctx, dateFrom, dateTo)
}

// Publish mocks base method.
func (m *MockMessage) Publish(ctx context.Context, key, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, key, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockMessageMockRecorder) Publish(ctx, key, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessage)(nil).Publish), ctx, key, messageID)
}

// Subscribe mocks base method.
func (m *MockMessage) Subscribe(ctx context.Context, keys ...string) *repository.MessageSubscription {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*repository.MessageSubscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockMessageMockRecorder) Subscribe(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockMessage)(nil).Subscribe), varargs...)
}
